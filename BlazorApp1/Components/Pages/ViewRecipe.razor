@page "/recipe/{RecipeId}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using System.Timers
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@using System.Text.Json
@inject IConfiguration Configuration
@inject ILogger<ViewRecipe> Logger


<h3>@recipe.Title</h3>

<button @onclick="NavigateToAnotherPage">Back</button>

<img src="@recipe.Image" alt="Recipe Image">

@if (AnalyzedInstructions != null && AnalyzedInstructions.Count > 0)
{
    <ol>
        @foreach (var step in AnalyzedInstructions)
        {
            <li>@step.step</li>
        }
    </ol>
}
else
{
    <p>No instructions found.</p>
}


@if (AnalyzedIngredients != null && AnalyzedIngredients.Count > 0)
{
    <ol>
        @foreach (var ingredient in AnalyzedIngredients)
        {
            <li>@ingredient.Original</li>
        }
    </ol>
}
else 
{
    <p>No ingredients found.</p>
}



@code {
    [Parameter]
    public string RecipeId { get; set; } = "";

    public string RecipeTitle { get; set; } = "";
    private Recipe recipe = new();

    private List<Steps> AnalyzedInstructions = new();

    private List<ExtendedIngredient> AnalyzedIngredients { get; set; } = new List<ExtendedIngredient>();


    private string? errorMessage;
    private string ApiKey => Configuration["Spoonacular:ApiKey"];
    private Timer? debounceTimer;
    private const int DEBOUNCE_DELAY = 500; // Wait 500ms before making API call
    private DateTime lastRequestTime = DateTime.MinValue;
    private const int MIN_REQUEST_INTERVAL = 1000; // Minimum 1 second between requests
    private bool isSearchingInstructions = false; // To prevent overlapping requests
    private bool isSearchingIngredients = false;

    protected override async void OnInitialized()
    {
        Logger.LogInformation("Recipe component initialized");
        if (string.IsNullOrEmpty(ApiKey))
        {
            errorMessage = "RapidAPI key is not configured";
            Logger.LogError("RapidAPI key is missing");
        }
        await RecipeDataThrottle();
        await RecipeIngredientThrottle();
        Logger.LogInformation("Recipe title: ", RecipeTitle);
        Logger.LogInformation("Recipe ID: ", RecipeId);
    }

        protected override void OnParametersSet()
    {
        // Setup debounce timer
        debounceTimer?.Dispose();
        debounceTimer = new Timer(DEBOUNCE_DELAY);
        debounceTimer.Elapsed += async (sender, e) => await RecipeDataThrottle();
        debounceTimer.Elapsed += async (sender, e) => await RecipeIngredientThrottle();
        debounceTimer.AutoReset = false;
    }


    private async Task RecipeDataThrottle()
    {
        if (isSearchingInstructions) return; // Prevent overlapping requests
        isSearchingInstructions = true;

        try
        {
            // Ensure we're not making requests too frequently
            var timeSinceLastRequest = DateTime.Now - lastRequestTime;
            if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL)
            {
                await Task.Delay(MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds);
            }

            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/{RecipeId}/analyzedInstructions"),
                Headers =
                {
                    { "x-rapidapi-key", ApiKey },
                    { "x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com" },
                },
            };
            var response = await client.SendAsync(request);
            lastRequestTime = DateTime.Now;

            if (response.IsSuccessStatusCode)
        {
            var jsonString2 = await response.Content.ReadAsStringAsync();
            
            // Deserialize analyzedInstructions as a list of steps
            var analyzedInstructions = System.Text.Json.JsonSerializer.Deserialize<List<Recipe>>(jsonString2);
            
            if (analyzedInstructions != null && analyzedInstructions.Count > 0)
            {
                AnalyzedInstructions = analyzedInstructions[0].steps;
            }

            StateHasChanged(); 
        }
        else
        {
            errorMessage = $"API call failed: {response.StatusCode}";
            Logger.LogError(errorMessage);
        }
            var jsonString = await response.Content.ReadAsStringAsync();
            Logger.LogInformation($"API response received for instructions: {jsonString}");
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                errorMessage = ex.Message.Contains("429")
                    ? "Rate limit reached. Please wait a moment before trying again."
                    : $"Error: {ex.Message}";
                StateHasChanged();
            });
        }
        finally
        {
            isSearchingInstructions = false; // Reset the flag
        }
    }

    private async Task RecipeIngredientThrottle()
{
    if (isSearchingIngredients) return;
    isSearchingIngredients = true;

    try
    {
        Logger.LogInformation("Starting RecipeIngredientThrottle for recipe ID: {RecipeId}", RecipeId);

        // Throttle requests
        var timeSinceLastRequest = DateTime.Now - lastRequestTime;
        if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL)
        {
            var delayTime = MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds;
            Logger.LogInformation("Throttling request. Delaying for {delayTime}ms", delayTime);
            await Task.Delay(delayTime);
        }

        using var client = new HttpClient();
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/{RecipeId}/information"),
            Headers =
            {
                {"x-rapidapi-key", ApiKey},
                {"x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"},
            },
        };

        Logger.LogInformation("Sending request to Spoonacular API");
        var response = await client.SendAsync(request);
        lastRequestTime = DateTime.Now;

        if (!response.IsSuccessStatusCode)
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Logger.LogError("API request failed with status {StatusCode}: {ErrorContent}", 
                response.StatusCode, errorContent);
            errorMessage = $"API error: {response.StatusCode}";
            return;
        }

        var jsonString = await response.Content.ReadAsStringAsync();
        Logger.LogInformation("Received API response: {JsonString}", jsonString);

        try
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                AllowTrailingCommas = true
            };

            var apiRecipe = JsonSerializer.Deserialize<Recipe>(jsonString, options);

            if (apiRecipe == null)
            {
                Logger.LogError("Deserialization returned null");
                errorMessage = "Failed to parse recipe data";
                return;
            }

            Logger.LogInformation("Successfully deserialized recipe: {Title}", apiRecipe.Title);
            Logger.LogInformation("Found {Count} extended ingredients", apiRecipe.ExtendedIngredients?.Count ?? 0);

            // Update the component state
            recipe = apiRecipe;
            AnalyzedIngredients = apiRecipe.ExtendedIngredients ?? new List<ExtendedIngredient>();
            
            Logger.LogInformation("Updated component state with recipe data");
        }
        catch (JsonException ex)
        {
            Logger.LogError(ex, "JSON deserialization failed");
            errorMessage = "Failed to process recipe data";
        }
    }
    catch (Exception ex)
    {
        Logger.LogError(ex, "Error in RecipeIngredientThrottle");
        errorMessage = ex.Message.Contains("429") 
            ? "Rate limit reached. Please wait before trying again." 
            : $"Error: {ex.Message}";
    }
    finally
    {
        isSearchingIngredients = false;
        await InvokeAsync(StateHasChanged);
    }
}


    @* private async Task RecipeIngredientThrottle()
    {
        if (isSearchingIngredients) return; // Prevent overlapping requests
        isSearchingIngredients = true;

        try
        {
            Logger.LogInformation($"Beginning of RecipeIngredientThrottle.");
            // Ensure we're not making requests too frequently
            var timeSinceLastRequest = DateTime.Now - lastRequestTime;
            if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL)
            {
                await Task.Delay(MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds);
            }

            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/{RecipeId}/information"),
                Headers =
                {
                    {"x-rapidapi-key", ApiKey},
                    {"x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"},
                },
            };
            var response = await client.SendAsync(request);
            lastRequestTime = DateTime.Now;

        if (response.IsSuccessStatusCode)
            {
                var jsonString3 = await response.Content.ReadAsStringAsync();
                Logger.LogInformation($"API response for ingredients: {jsonString3}");
                
                var recipe = JsonSerializer.Deserialize<Recipe>(jsonString3);
                
                if(recipe.Title != null) {
                    Logger.LogInformation("Checking to see if recipe empty: ", recipe.Title);
                    }
                else 
                {
                    Logger.LogInformation("Recipe empty.");
                    }
                
                if (recipe != null)
                {
                    Logger.LogInformation("We are inside the if");
                    Logger.LogInformation($"ExtendedIngredients count: {recipe.ExtendedIngredients?.Count}");
                    AnalyzedIngredients = recipe.ExtendedIngredients ?? new();
                }
                
                await InvokeAsync(StateHasChanged);
            }

            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            Logger.LogInformation($"API response received for ingredients: {jsonString}");
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                errorMessage = ex.Message.Contains("429")
                    ? "Rate limit reached. Please wait a moment before trying again."
                    : $"Error: {ex.Message}";
                StateHasChanged();
            });
        }
        finally
        {
            isSearchingIngredients = false; // Reset the flag
        }
    } *@

    private void NavigateToAnotherPage()
    {
        NavigationManager.NavigateTo("");
        Console.Write("Button clicked.");
    }
    
public class Recipe
{
    [JsonPropertyName("id")]
    public int Id { get; set; }

    [JsonPropertyName("title")]
    public string Title { get; set; } = "";

    [JsonPropertyName("extendedIngredients")]
    public List<ExtendedIngredient> ExtendedIngredients { get; set; } = new List<ExtendedIngredient>();

    [JsonPropertyName("image")]
    public string Image { get; set; } = "";

    [JsonPropertyName("instructions")]
    public string Instructions { get; set; } = "";

    [JsonPropertyName("steps")]
    public List<Steps> steps { get; set; } = new List<Steps>();
}

    public class ExtendedIngredient
{
    [JsonPropertyName("id")]
    public int Id { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; set; } = "";

    [JsonPropertyName("original")]
    public string Original { get; set; } = "";

    [JsonPropertyName("amount")]
    public decimal Amount { get; set; }

    [JsonPropertyName("unit")]
    public string Unit { get; set; } = "";
}
    
    public class analyzedIngredients
    {
        [JsonPropertyName("extendedIngredients")]
        public List<ExtendedIngredient> ExtendedIngredients {get; set; }
    }
    public class analyzedInstructions
    {
        [JsonPropertyName("steps")] 
        public List<Steps> steps { get; set; }
    }
    public class Steps
    {
        [JsonPropertyName("step")]
        public string step {get; set; } = "";
    }
}
