@page "/recipe/{RecipeId}" 
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using System.Timers
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@using System.Text.Json
@inject IConfiguration Configuration
@inject ILogger<ViewRecipe> Logger

<div class="body">
<h3> @recipe.Title</h3>

<img src="@recipe.Image" style="transform: translateX(60vh)" alt="Recipe Image">


@if (AnalyzedIngredients != null && AnalyzedIngredients.Count > 0) @*if there are ingredients to display *@
{
    <h4>Ingredients:</h4> @* header to precede ingredients *@
    <ol>
        @foreach (var ingredient in AnalyzedIngredients) @*C# feature: foreach loop - exclusively used to loop through elements in a data set*@
        {
            <li style="font-size: 2vh">@ingredient.Original</li> @*print out the Original trait of ingredient object*@
        }
    </ol>
}
else 
{
    <p>Loading recipes...</p> @*place holder while the api makes a call so a user doesn't immediately leave*@
}

@if (AnalyzedInstructions != null && AnalyzedInstructions.Count > 0) @*same as above*@
{
    <h4>Instructions:</h4>
    <ol>
        @foreach (var step in AnalyzedInstructions) @*looping through step elements in analyzed instructions*@
        {
            <li style="font-size: 2vh">@step.step</li> @*now print step trait of object step*@
        }
    </ol>
}
else
{
    <p>Loading instructions...</p> @*place holder*@
}
</div>

<style>
    body {
    background: #FFFFFF; @*white background to fit*@
    }
</style>

@code { @*full C# code begins*@
    [Parameter]
    public string RecipeId { get; set; } = ""; 
    private Recipe recipe = new(); @*new Recipe instance called recipe*@

    private List<Steps> AnalyzedInstructions = new(); @*new List of steps instance called analyzed instructions *@
    private List<ExtendedIngredient> AnalyzedIngredients { get; set; } = new List<ExtendedIngredient>(); @*new instance of a list of extended ingredients called analyzed ingredients*@

    private string? errorMessage;
    private string ApiKey => Configuration["Spoonacular:ApiKey"]; @* string of my api key saved in another file so i can keep it private and also not type it a lot*@
    private const int DEBOUNCE_DELAY = 500; 
    private const int MIN_REQUEST_INTERVAL = 1000;
    
    // Added separate timestamps for each endpoint
    private DateTime lastIngredientsRequestTime = DateTime.MinValue;
    private DateTime lastInstructionsRequestTime = DateTime.MinValue;
    
    // Added semaphore to control concurrent access
    private static readonly SemaphoreSlim apiCallSemaphore = new SemaphoreSlim(1, 1);
    private bool isSearchingInstructions = false;
    private bool isSearchingIngredients = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Recipe component initialized"); @*checking to see if recipe component starts up as an error check*@
        if (string.IsNullOrEmpty(ApiKey))
        {
            errorMessage = "RapidAPI key is not configured"; @*checking if theres an error with our api connection*@
            Logger.LogError("RapidAPI key is missing");
            return;
        }
        
        // Sequential execution with proper delay
        await RecipeIngredientThrottle(); // calling this function
        await Task.Delay(1000); // Ensure minimum 1s between different endpoints
        await RecipeDataThrottle(); // now calling this function
    }

    private async Task RecipeDataThrottle()
    {
        await apiCallSemaphore.WaitAsync();
        try
        {
            if (isSearchingInstructions) return;
            isSearchingInstructions = true; // 

            var timeSinceLastRequest = DateTime.Now - lastInstructionsRequestTime;
            if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL) // calculating time for api calls
            {
                await Task.Delay(MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds);
            }

            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get, // we are getting because we want to import data to use rather than POSTing
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/{RecipeId}/analyzedInstructions"), // we are requesting analuzed instructions from the API
                Headers =
                {
                    { "x-rapidapi-key", ApiKey }, // using our unique api key
                    { "x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com" },
                },
            };
            var response = await client.SendAsync(request);
            lastInstructionsRequestTime = DateTime.Now; // marking when we last did a request

            if (response.IsSuccessStatusCode) // if we get a 200 response code
            {
                var jsonString2 = await response.Content.ReadAsStringAsync(); // serializing the JSON into a String so the rest of our program can easily interact with it
                var analyzedInstructions = System.Text.Json.JsonSerializer.Deserialize<List<Recipe>>(jsonString2); // deserailizing into a list of recipes to match our types
                
                if (analyzedInstructions != null && analyzedInstructions.Count > 0)
                {
                    AnalyzedInstructions = analyzedInstructions[0].steps; 
                }
                StateHasChanged(); // making sure that rerendering occurs so the updates 
            }
            else
            {
                errorMessage = $"API call failed: {response.StatusCode}";
                Logger.LogError(errorMessage);
            }
            
            var jsonString = await response.Content.ReadAsStringAsync(); 
            Logger.LogInformation($"API response received for instructions: {jsonString}");
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                errorMessage = ex.Message.Contains("429")
                    ? "Rate limit reached. Please wait a moment before trying again."
                    : $"Error: {ex.Message}";
                StateHasChanged();
            });
        }
        finally // execute the stuff below regardless of outcome
        {
            isSearchingInstructions = false; // set the flag to false
            apiCallSemaphore.Release(); // now other tasks can be performed
        }
    }

    private async Task RecipeIngredientThrottle()
    {
        await apiCallSemaphore.WaitAsync();
        try
        {
            if (isSearchingIngredients) return;
            isSearchingIngredients = true; // now set this flag to true

            var timeSinceLastRequest = DateTime.Now - lastIngredientsRequestTime; // calculate time since last request
            if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL)
            {
                await Task.Delay(MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds);
            }

            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get, // receiving info from API
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/{RecipeId}/information"), // we are getting information of a recipe bc that is where the ingredient info is stored
                Headers =
                {
                    {"x-rapidapi-key", ApiKey}, // using our key and the host that spoonacular partners w is rapid api
                    {"x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"},
                },
            };

            var response = await client.SendAsync(request);
            lastIngredientsRequestTime = DateTime.Now;

            if (!response.IsSuccessStatusCode) // if not 200 response
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("API request failed with status {StatusCode}: {ErrorContent}", // tell us the error
                    response.StatusCode, errorContent);
                errorMessage = $"API error: {response.StatusCode}"; 
                return;
            }

            var jsonString = await response.Content.ReadAsStringAsync(); //read the json response as a striing so we can easily use the data elsewhere in our project
            Logger.LogInformation("Received API response: {JsonString}", jsonString);

            try
            {
                var options = new JsonSerializerOptions //JsonSerializerOptions is a class in .NET lets use customize how JSOn is serialized and deserialized
                {
                    PropertyNameCaseInsensitive = true, // we want insensitivity and trailing commas so that we do not accidentally miss some ingredients due to some small differences
                    AllowTrailingCommas = true
                };

                var apiRecipe = JsonSerializer.Deserialize<Recipe>(jsonString, options);

                if (apiRecipe == null) // if we don't get anything in apiRecipe
                {
                    Logger.LogError("Deserialization returned null"); // return error status message
                    errorMessage = "Failed to parse recipe data";
                    return;
                }

                recipe = apiRecipe; // set the recipe
                AnalyzedIngredients = apiRecipe.ExtendedIngredients ?? new List<ExtendedIngredient>(); // Set AnalyzedIngredients to the list of ingredients from apiRecipe, unless that list is null in which case, just use an empty list
            }
            catch (JsonException ex) // if theres a JSON error
            {
                Logger.LogError(ex, "JSON deserialization failed");
                errorMessage = "Failed to process recipe data";
            }
        }
        catch (Exception ex) 
        {
            Logger.LogError(ex, "Error in RecipeIngredientThrottle");
            errorMessage = ex.Message.Contains("429") //making sure we dont go over the rate limit which is very important because if we do we could get banned 
                ? "Rate limit reached. Please wait before trying again." 
                : $"Error: {ex.Message}";
        }
        finally
        {
            isSearchingIngredients = false; // when done the flag is set to false 
            apiCallSemaphore.Release(); // allow the next task to execute
            await InvokeAsync(StateHasChanged);
        }
    }
    
    public class Recipe // recipe class with multiple attributes
    {
        [JsonPropertyName("id")] // recipe id to find a match in the spoonacular database
        public int Id { get; set; }

        [JsonPropertyName("title")] // title to pull from the database
        public string Title { get; set; } = "";

        [JsonPropertyName("extendedIngredients")] // extended ingerdients list matched to provided extended ingriednts list from spoonacular
        public List<ExtendedIngredient> ExtendedIngredients { get; set; } = new List<ExtendedIngredient>();

        [JsonPropertyName("image")] // the picture that is provided from spoonacular
        public string Image { get; set; } = "";

        [JsonPropertyName("instructions")] // instruction that come from spoonacular it is a string with the steps just all put together afetr being deserialized
        public string Instructions { get; set; } = "";

        [JsonPropertyName("steps")] // list of step objects 
        public List<Steps> steps { get; set; } = new List<Steps>();
    }

    public class ExtendedIngredient // extended inigredient object has attributes to it as seen in the spoonacular docs
    {
        [JsonPropertyName("id")] // id of ingerdient
        public int Id { get; set; }

        [JsonPropertyName("name")] // name of ingredient
        public string Name { get; set; } = "";

        [JsonPropertyName("original")] // basic, original name for ingredient
        public string Original { get; set; } = "";

        [JsonPropertyName("amount")] // how much of the ingredient you need, does not have to be a whole number
        public decimal Amount { get; set; }

        [JsonPropertyName("unit")] // what kind of measuring unit like cups, ounces, etc
        public string Unit { get; set; } = "";
    }
    
    public class analyzedIngredients // basically ingerdients that have been processed to be called by their original anmes
    {
        [JsonPropertyName("extendedIngredients")]
        public List<ExtendedIngredient> ExtendedIngredients {get; set; } // of type extended ingredient bc thats where the original comes from  
    }
    
    public class analyzedInstructions // after the steps have been processed
    {
        [JsonPropertyName("steps")] // has steps attribute which is a list of steps
        public List<Steps> steps { get; set; }
    }
    
    public class Steps // steps object aka instructions
    {
        [JsonPropertyName("step")] // has the strigs of instructions aka steps
        public string step {get; set; } = "";
    }
}