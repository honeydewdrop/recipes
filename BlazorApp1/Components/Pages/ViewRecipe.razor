@page "/recipe/{RecipeId}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using System.Timers
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@using System.Text.Json
@inject IConfiguration Configuration
@inject ILogger<ViewRecipe> Logger


<h3>@recipe.Title</h3>

<img src="@recipe.Image" alt="Recipe Image">

<button @onclick="NavigateToAnotherPage">Back</button>


@if (AnalyzedIngredients != null && AnalyzedIngredients.Count > 0)
{
    <h4>Ingredients:</h4>
    <ol>
        @foreach (var ingredient in AnalyzedIngredients)
        {
            <li>@ingredient.Original</li>
        }
    </ol>
}
else 
{
    <p>No ingredients found.</p>
}

@if (AnalyzedInstructions != null && AnalyzedInstructions.Count > 0)
{
    <h4>Instructions:</h4>
    <ol>
        @foreach (var step in AnalyzedInstructions)
        {
            <li>@step.step</li>
        }
    </ol>
}
else
{
    <p>No instructions found.</p>
}

@code {
    [Parameter]
    public string RecipeId { get; set; } = "";

    public string RecipeTitle { get; set; } = "";
    private Recipe recipe = new();

    private List<Steps> AnalyzedInstructions = new();
    private List<ExtendedIngredient> AnalyzedIngredients { get; set; } = new List<ExtendedIngredient>();

    private string? errorMessage;
    private string ApiKey => Configuration["Spoonacular:ApiKey"];
    private const int DEBOUNCE_DELAY = 500;
    private const int MIN_REQUEST_INTERVAL = 1000;
    
    // Added separate timestamps for each endpoint
    private DateTime lastIngredientsRequestTime = DateTime.MinValue;
    private DateTime lastInstructionsRequestTime = DateTime.MinValue;
    
    // Added semaphore to control concurrent access
    private static readonly SemaphoreSlim apiCallSemaphore = new SemaphoreSlim(1, 1);
    private bool isSearchingInstructions = false;
    private bool isSearchingIngredients = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Recipe component initialized");
        if (string.IsNullOrEmpty(ApiKey))
        {
            errorMessage = "RapidAPI key is not configured";
            Logger.LogError("RapidAPI key is missing");
            return;
        }
        
        // Sequential execution with proper delay
        await RecipeIngredientThrottle();
        await Task.Delay(1000); // Ensure minimum 1s between different endpoints
        await RecipeDataThrottle();
    }

    private async Task RecipeDataThrottle()
    {
        await apiCallSemaphore.WaitAsync();
        try
        {
            if (isSearchingInstructions) return;
            isSearchingInstructions = true;

            var timeSinceLastRequest = DateTime.Now - lastInstructionsRequestTime;
            if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL)
            {
                await Task.Delay(MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds);
            }

            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/{RecipeId}/analyzedInstructions"),
                Headers =
                {
                    { "x-rapidapi-key", ApiKey },
                    { "x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com" },
                },
            };
            var response = await client.SendAsync(request);
            lastInstructionsRequestTime = DateTime.Now;

            if (response.IsSuccessStatusCode)
            {
                var jsonString2 = await response.Content.ReadAsStringAsync();
                var analyzedInstructions = System.Text.Json.JsonSerializer.Deserialize<List<Recipe>>(jsonString2);
                
                if (analyzedInstructions != null && analyzedInstructions.Count > 0)
                {
                    AnalyzedInstructions = analyzedInstructions[0].steps;
                }
                StateHasChanged(); 
            }
            else
            {
                errorMessage = $"API call failed: {response.StatusCode}";
                Logger.LogError(errorMessage);
            }
            
            var jsonString = await response.Content.ReadAsStringAsync();
            Logger.LogInformation($"API response received for instructions: {jsonString}");
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                errorMessage = ex.Message.Contains("429")
                    ? "Rate limit reached. Please wait a moment before trying again."
                    : $"Error: {ex.Message}";
                StateHasChanged();
            });
        }
        finally
        {
            isSearchingInstructions = false;
            apiCallSemaphore.Release();
        }
    }

    private async Task RecipeIngredientThrottle()
    {
        await apiCallSemaphore.WaitAsync();
        try
        {
            if (isSearchingIngredients) return;
            isSearchingIngredients = true;

            var timeSinceLastRequest = DateTime.Now - lastIngredientsRequestTime;
            if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL)
            {
                await Task.Delay(MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds);
            }

            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/{RecipeId}/information"),
                Headers =
                {
                    {"x-rapidapi-key", ApiKey},
                    {"x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"},
                },
            };

            var response = await client.SendAsync(request);
            lastIngredientsRequestTime = DateTime.Now;

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("API request failed with status {StatusCode}: {ErrorContent}", 
                    response.StatusCode, errorContent);
                errorMessage = $"API error: {response.StatusCode}";
                return;
            }

            var jsonString = await response.Content.ReadAsStringAsync();
            Logger.LogInformation("Received API response: {JsonString}", jsonString);

            try
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    AllowTrailingCommas = true
                };

                var apiRecipe = JsonSerializer.Deserialize<Recipe>(jsonString, options);

                if (apiRecipe == null)
                {
                    Logger.LogError("Deserialization returned null");
                    errorMessage = "Failed to parse recipe data";
                    return;
                }

                recipe = apiRecipe;
                AnalyzedIngredients = apiRecipe.ExtendedIngredients ?? new List<ExtendedIngredient>();
            }
            catch (JsonException ex)
            {
                Logger.LogError(ex, "JSON deserialization failed");
                errorMessage = "Failed to process recipe data";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in RecipeIngredientThrottle");
            errorMessage = ex.Message.Contains("429") 
                ? "Rate limit reached. Please wait before trying again." 
                : $"Error: {ex.Message}";
        }
        finally
        {
            isSearchingIngredients = false;
            apiCallSemaphore.Release();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void NavigateToAnotherPage()
    {
        NavigationManager.NavigateTo("");
        Console.Write("Button clicked.");
    }
    
    public class Recipe
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; } = "";

        [JsonPropertyName("extendedIngredients")]
        public List<ExtendedIngredient> ExtendedIngredients { get; set; } = new List<ExtendedIngredient>();

        [JsonPropertyName("image")]
        public string Image { get; set; } = "";

        [JsonPropertyName("instructions")]
        public string Instructions { get; set; } = "";

        [JsonPropertyName("steps")]
        public List<Steps> steps { get; set; } = new List<Steps>();
    }

    public class ExtendedIngredient
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = "";

        [JsonPropertyName("original")]
        public string Original { get; set; } = "";

        [JsonPropertyName("amount")]
        public decimal Amount { get; set; }

        [JsonPropertyName("unit")]
        public string Unit { get; set; } = "";
    }
    
    public class analyzedIngredients
    {
        [JsonPropertyName("extendedIngredients")]
        public List<ExtendedIngredient> ExtendedIngredients {get; set; }
    }
    
    public class analyzedInstructions
    {
        [JsonPropertyName("steps")] 
        public List<Steps> steps { get; set; }
    }
    
    public class Steps
    {
        [JsonPropertyName("step")]
        public string step {get; set; } = "";
    }
}