@using System.Text;

@using System.Timers
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IConfiguration Configuration
@inject ILogger<SearchBar> Logger


<div class="search-container">
    <div class="search-box">
            <div class="ingredient-tags-container">
                @foreach (var ingredient in selectedIngredients) @*for each loop, C# speciality*@
                {
                    <div class="ingredient-tag">
                        @ingredient.Name
                        <button @onclick="() => RemoveIngredient(ingredient)" class="remove-tag"> @* anonymous function *@
                            &times;
                        </button>
                    </div>
                }
            </div>
                <input type="text"
                    @bind="searchQuery" 
                    @bind:event="oninput"
                    @onkeyup="HandleKeyUp" 
                    placeholder="@(selectedIngredients.Any() ? "" : "Search for ingredients...")"
                    class="search-input" />
        </div>
        <button @onclick="FetchRecipes" class="search-button">Find Recipes</button> @*anonymous function *@
        @if (isLoadingRecipes)
{
    <div class="loading-overlay">
        <div class="loading-spinner"></div>
        <div class="loading-text">Loading recipes...</div>
    </div>
}
    </div>
 

    <div class="diet-filters"> @* different checkboxes for diets and allergies *@
    <h5>Diet filters:</h5>
    <div class="diet-filter-options">
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Vegetarian" />
            Vegetarian
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Vegan" />
            Vegan
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Keto" />
            Keto
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Pescatarian" />
            Pescatarian
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Primal" />
            Primal
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Paleo" />
            Paleo
        </label>
    </div>

    <div class="allergy-filters"> @*allergy checkboxes *@
    <h5>Allergies:</h5>
    <div class="allergy-filter-options">
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Dairy" />
            Dairy
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Gluten" />
            Gluten
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Peanut" />
            Peanut
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Soy" />
            Soy
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Seafood" />
            Seafood
        </label>
        <label class="filter-checkbox">
            <input type="checkbox" @bind="Sesame" />
            Sesame
        </label>
    </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-2" style="transform: translateX(67vh); width: 40vh;">@errorMessage</div>
    }

    @if (suggestions.Any()) @*if there any autofill suggestions*@
    {
        <div class="suggestions-container">
                @foreach (var suggestion in suggestions)
                {
                    <div class="suggestion-item" style="border-radius: 0.2vh" @onclick="() => SelectIngredient(suggestion)"> @*anonynmous inline function*@
                        @suggestion.Name
                    </div>
                }
        </div>
    }


    @if (allRecipes.Any()) @*unique C# feature: LINQ .Any()*@
    {
        <div class="recipe-list mt-4">
            <h5>Recipes Found:</h5>
            <ul>
                <div class="grid">
                @foreach (var recipe in displayedRecipes)
                {
                <div class="grid__item">
                    <div class="grid__item" @onclick="() => NavigateToRecipe(recipe)">
                    <div class="card"><img class="card__img" src="@recipe.Image" alt="Recipe Image">
                    <div class="card__content">
    <h1 class="card__header">@recipe.Title</h1>
    @if (recipe.TotalIngredients > 0)
    {
        <p class="card__text">
            You have @selectedIngredients.Count/@recipe.TotalIngredients total ingredients!
        </p>
    }
</div>
                    </div>
                    </div>
                </div>
                }
                </div>
            </ul>
        </div>
    } else if (!allRecipes.Any() && searchRan == true) {
        <ul style="text-align: center; transform: translateX(65vh); width: 40vh; font-size: 1.5em">No recipes matching query found. Hint: Did you check a filter with a contradicting ingredient?</ul>
        <ul style="text-align: center; transform: translateX(65vh); width: 40vh; font-size: 1.5em">Or maybe there just aren't any... :(</ul>
    }
    @if (allRecipes.Count > displayedRecipes.Count)
    {
        <button class="view-more-btn" @onclick="LoadMore">
            View More Recipes
        </button>
    }
    </div>

<style>

.grid {
  display: grid;
  width: 100%; 
  grid-gap: 2rem;
  grid-template-columns: repeat(4, minmax(40vh, 1fr)); /* Strict 4 columns */
  align-items: start;
  padding: 0 0rem; 
  box-sizing: border-box; 
}

.grid__item {
  background-color: #fff;
  border-radius: 0rem;
  width: 100%; 
  height: 100%;
  overflow: hidden;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: 0.2s;
}

/* Responsive adjustments */
@@media (max-width: 1200px) {
  .grid {
    grid-template-columns: repeat(3, minmax(0, 1fr)); /* 3 columns on medium screens */
  }
}

@@media (max-width: 900px) {
  .grid {
    grid-template-columns: repeat(2, minmax(0, 1fr)); /* 2 columns on tablets */
  }
}

@@media (max-width: 600px) {
  .grid {
    grid-template-columns: 1fr; /* 1 column on mobile */
  }
}
.grid__item:hover {
  transform: translateY(-0.5%);
  box-shadow: 0 4rem 8rem rgba(0, 0, 0, 0.2);
}

.card__img {
  display: block;
  width: 100%;
  height: 18rem;
}
.card__content {
  padding: 1rem 1rem;
  height: 10rem;
  padding-bottom: 0rem;
}
.card__header {
  font-size: 1.5rem;
  color: #0d0d0d;
}
.card__text {
  font-size: 1.5rem;
  letter-spacing: 0.1rem;
  line-height: 1.7;
    margin-bottom: 0;
  padding-bottom: 0;
  color: #3d3d3d;
}

.suggestions-container {
    transform: translate(50em,-8em);
}
</style>

@code {

    //Filter variables for diets
    private bool Vegetarian { get; set; }
    private bool Vegan { get; set; }
    private bool Keto { get; set; }
    private bool Pescatarian { get; set; }
    private bool Primal { get; set; }
    private bool Paleo { get; set; }

    //filters for allergies
    private bool Dairy { get; set; }
    private bool Gluten { get; set; }
    private bool Peanut { get; set; }
    private bool Soy { get; set; }
    private bool Seafood { get; set; }
    private bool Sesame { get; set; }



    private string searchQuery = "";
    private List<IngredientSuggestion> suggestions = new();
    private string? errorMessage;
    private string ApiKey => Configuration["Spoonacular:ApiKey"];
    private Timer? debounceTimer;
    private const int DEBOUNCE_DELAY = 500; // Wait 500ms before making API call
    private DateTime lastRequestTime = DateTime.MinValue;
    private const int MIN_REQUEST_INTERVAL = 1000; // Minimum 1 second between requests
    private bool isSearching = false; // To prevent overlapping requests

    private bool searchRan = false; // so we don't display the no matching recipes message before searching
    private bool isLoadingRecipes = false;
    private DateTime lastApiCallTime = DateTime.MinValue;
private readonly SemaphoreSlim apiCallSemaphore = new SemaphoreSlim(1, 1);
private const int MIN_REQUEST_INTERVAL_MS = 1000; // 1 second between requests

[Parameter]
    public string RecipeId { get; set; } = "";
    private List<IngredientSuggestion> selectedIngredients = new();
    private List<Recipe> recipes = new(); // Currently shown recipes

    private List<Recipe> allRecipes = new List<Recipe>(); // All fetched recipes
    private List<Recipe> displayedRecipes = new List<Recipe>();
    private int visibleCount = 8; // amoutn to display immediately with query

private async Task HandleKeyUp(KeyboardEventArgs e)
{
    if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchQuery))
    {
        // Add the current search query as an ingredient if it's not already selected
        var newIngredient = new IngredientSuggestion { Name = searchQuery.Trim() };
        
        if (!selectedIngredients.Any(i => 
            string.Equals(i.Name, newIngredient.Name, StringComparison.OrdinalIgnoreCase)))
        {
            selectedIngredients.Add(newIngredient);
            searchQuery = "";
            suggestions.Clear();
            StateHasChanged();
        }
    }
    else
    {
        await HandleSearch(e); // Keep existing search behavior
    }
}
    protected override void OnInitialized()
    {
        Logger.LogInformation("IngredientSearch component initialized");
        if (string.IsNullOrEmpty(ApiKey))
        {
            errorMessage = "RapidAPI key is not configured";
            Logger.LogError("RapidAPI key is missing");
        }
    }

    protected override void OnParametersSet()
    {
        // Setup debounce timer
        debounceTimer?.Dispose();
        debounceTimer = new Timer(DEBOUNCE_DELAY);
        debounceTimer.Elapsed += async (sender, e) => await SearchWithThrottle();
        debounceTimer.AutoReset = false;
    }

    private async Task HandleSearch(KeyboardEventArgs e)
    {

        if (string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length < 2)
        {
            suggestions.Clear();
            return;
        }

        // Reset and start the debounce timer
        debounceTimer?.Stop();
        debounceTimer?.Start();
    }

    private async Task SearchWithThrottle()
    {
        if (isSearching) return; // Prevent overlapping requests
        isSearching = true;

        try
        {
            // Ensure we're not making requests too frequently
            var timeSinceLastRequest = DateTime.Now - lastRequestTime;
            if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL)
            {
                await Task.Delay(MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds);
            }

            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/food/ingredients/autocomplete?query={Uri.EscapeDataString(searchQuery)}&number=10"),
                Headers =
                {
                    { "x-rapidapi-key", ApiKey },
                    { "x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com" },
                },
            };

            lastRequestTime = DateTime.Now;
            var response = await client.SendAsync(request);

            if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
            {
                errorMessage = "Rate limit reached. Please wait a moment before trying again.";
                return;
            }

            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            Logger.LogInformation($"API response received: {jsonString}");

            var result = System.Text.Json.JsonSerializer.Deserialize<List<IngredientSuggestion>>(jsonString);
            await InvokeAsync(() =>
            {
                suggestions = result ?? new List<IngredientSuggestion>();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                errorMessage = ex.Message.Contains("429")
                    ? "Rate limit reached. Please wait a moment before trying again."
                    : $"Error: {ex.Message}";
                suggestions.Clear();
                StateHasChanged();
            });
        }
        finally
        {
            isSearching = false; // Reset the flag
        }
    }
    
    
    private void SelectIngredient(IngredientSuggestion ingredient)
    {
        // Check if the ingredient is already selected
        if (!selectedIngredients.Any(i => i.Name == ingredient.Name))
        {
            selectedIngredients.Add(ingredient);
            Logger.LogInformation($"Added ingredient: {ingredient.Name}");
        }
        else
        {
            Logger.LogInformation($"Ingredient already selected: {ingredient.Name}");
        }

        // Reset search query and clear suggestions
        searchQuery = "";
        suggestions.Clear();
        StateHasChanged(); // Ensure UI updates
    }



    private void RemoveIngredient(IngredientSuggestion ingredient) // function to remove ingredients
    {
        selectedIngredients.Remove(ingredient);
        Logger.LogInformation($"Removed ingredient: {ingredient.Name}");

    }

private async Task FetchRecipes() // asynchronous fucntion which runs at the same as the autofill perchance
{
   if (!selectedIngredients.Any())
    {
        errorMessage = "Please select at least one ingredient.";
        allRecipes.Clear();
        return;
    }

    try
    {
        isLoadingRecipes = true;
        using var client = new HttpClient();
        
        // Initial search to get recipe IDs
        var requestUri = new StringBuilder(
            "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/complexSearch?" +
            $"includeIngredients={Uri.EscapeDataString(string.Join(",", selectedIngredients.Select(i => i.Name)))}" +
            "&number=100" +
            "&instructionsRequired=true");

        // Append the approriate filters to search
        if (Vegetarian) requestUri.Append("&diet=vegetarian");
        if (Vegan) requestUri.Append("&diet=vegan");
        if (Keto) requestUri.Append("&diet=keto");
        if (Pescatarian) requestUri.Append("&diet=pescatarian");
        if (Primal) requestUri.Append("&diet=primal");
        if (Paleo) requestUri.Append("&diet=paleo");
        if (Dairy) requestUri.Append("&intolerances=dairy");
        if (Gluten) requestUri.Append("&intolerances=gluten");
        if (Peanut) requestUri.Append("&intolerances=peanut");
        if (Soy) requestUri.Append("&intolerances=soy");
        if (Seafood) requestUri.Append("&intolerances=seafood");
        if (Sesame) requestUri.Append("&intolerances=sesame");
        


                var request = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri(requestUri.ToString()),
            Headers =
            {
                { "x-rapidapi-key", ApiKey },
                { "x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com" },
            },
        };

        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();

        var jsonString = await response.Content.ReadAsStringAsync();
        var searchResults = System.Text.Json.JsonSerializer.Deserialize<ComplexSearchResponse>(jsonString);

        // Clear previous results
        allRecipes.Clear();

    //using LINQ
    // Select: projecting each element from searchResults.Results into just its Id value
    // ToList materializes the result into a list of the corresponding data type
    var recipeIds = searchResults.Results.Select(r => r.Id).ToList();
    
    // Get detailed information in bulk
    var detailedRecipes = await GetBulkRecipeInformation(recipeIds);
    
    // Process each recipe
    foreach (var recipe in detailedRecipes)
    {
        recipe.UsedIngredientCount = CountMatchingIngredients(recipe);
        allRecipes.Add(recipe);
    }

        errorMessage = "";
        UpdateDisplayedRecipes();
        StateHasChanged();
        searchRan = true;
        isLoadingRecipes = false;
    }
    catch (Exception ex)
    {
        errorMessage = $"Error fetching recipes: {ex.Message}";
        allRecipes.Clear();
        StateHasChanged();
    }
}private async Task<List<Recipe>> GetBulkRecipeInformation(List<int> recipeIds)
{
    // wait to enter the semaphore so we don't overload the API with parallel requests
    await apiCallSemaphore.WaitAsync();

    try
    {
        // calculate how much time has passed since the last API call
        var timeSinceLastCall = DateTime.Now - lastApiCallTime;

        // if it's too soon to make another request, wait the necessary time
        if (timeSinceLastCall.TotalMilliseconds < MIN_REQUEST_INTERVAL_MS)
        {
            var delayTime = (int)(MIN_REQUEST_INTERVAL_MS - timeSinceLastCall.TotalMilliseconds);
            await Task.Delay(delayTime); // delay to respect the API rate limit
        }

        // create a new HttpClient to send the request
        using var client = new HttpClient();

        // convert the list of recipe IDs into a comma-separated string
        var idsParam = string.Join(",", recipeIds);

        // build the GET request with headers for authentication
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/informationBulk?ids={idsParam}"),
            Headers =
            {
                { "x-rapidapi-key", ApiKey },
                { "x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com" },
            },
        };

        // update the time we made the last API call
        lastApiCallTime = DateTime.Now;

        // send the request and make sure it succeeded
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();

        // read the response body as a string
        var jsonString = await response.Content.ReadAsStringAsync();

        // deserialize the JSON response into a list of Recipe objects
        return System.Text.Json.JsonSerializer.Deserialize<List<Recipe>>(jsonString) ?? new List<Recipe>();
    }
    catch (HttpRequestException httpEx) when (httpEx.Message.Contains("429"))
    {
        // if we hit the rate limit (HTTP 429), wait a bit and try again
        await Task.Delay(5000);
        return await GetBulkRecipeInformation(recipeIds);
    }
    catch
    {
        // if any other error happens, just return an empty list
        return new List<Recipe>();
    }
    finally
    {
        // release the semaphore so other tasks can use it
        apiCallSemaphore.Release();
    }
}

private int CountMatchingIngredients(Recipe recipe)
{
    // if the recipe doesn't have any ingredients listed, return 0
    if (recipe.ExtendedIngredients == null || !recipe.ExtendedIngredients.Any())
        return 0;

    int count = 0;

    // loop through each of the user's selected ingredients
    foreach (var selectedIngredient in selectedIngredients)
    {
        // check if any of the recipe's ingredients contain the selected ingredient name
        // match is done against both the 'Name' and the 'Original' fields of the ingredient
        // comparison is case-insensitive

        // LINQ is used here with .Any() to check if at least one match exists in the list
        if (recipe.ExtendedIngredients.Any(ri => 
            ri.Name.Contains(selectedIngredient.Name, StringComparison.OrdinalIgnoreCase) ||
            ri.Original.Contains(selectedIngredient.Name, StringComparison.OrdinalIgnoreCase)))
        {
            count++; // increase the count for each selected ingredient that matches
        }
    }

    // return how many selected ingredients matched with this recipe
    return count;
}


private void UpdateDisplayedRecipes() @*LINQ chaining, filtering, sorting, selecting a limited number, and materializing result to list*@
{
    displayedRecipes = allRecipes
        .Where(r => r.TotalIngredients > 0)
        .OrderBy(r => Math.Abs(1 - (double)selectedIngredients.Count / r.TotalIngredients))
        .Take(visibleCount)
        .ToList();
}


    private void LoadMore()
    {
        visibleCount += 8; // Load 8 more per button click
        UpdateDisplayedRecipes(); // update the amt of displayed recipes
    }

public class ComplexSearchResponse
{
    [JsonPropertyName("results")]

    //Hold list of results from api response
    public List<Recipe> Results { get; set; } = new();
}


private void NavigateToRecipe(Recipe recipe)
{
    try 
    {
        NavigationManager.NavigateTo($"/recipe/{recipe.Id}");
    }
    catch (Exception ex)
    {
        errorMessage = $"Navigation failed: {ex.Message}";
        Logger.LogError(ex, "Navigation error");
        StateHasChanged();
    }
}


    public class Recipe
    {
        [JsonPropertyName("title")]
        public string Title { get; set; } = "";

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("instructions")]
        public string Instructions { get; set; } = "";

    [JsonPropertyName("extendedIngredients")]
    public List<RecipeIngredient>? ExtendedIngredients { get; set; }

    public int UsedIngredientCount { get; set; }
    public int TotalIngredients => ExtendedIngredients?.Count ?? 0;

        [JsonPropertyName("image")]
        public string Image { get; set; } = "";
    }

    public class IngredientSuggestion
    {
        [JsonPropertyName("name")]
        public string Name { get; set; } = "";

        [JsonPropertyName("id")]
        public int id { get; set; }
    }

public class RecipeIngredient
{
    [JsonPropertyName("name")]
    public string Name { get; set; } = "";
    
    [JsonPropertyName("original")]
    public string Original { get; set; } = "";
}

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}                                                   