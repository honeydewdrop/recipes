@using System.Timers
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IConfiguration Configuration
@inject ILogger<SearchBar> Logger

<div class="search-container">
    <div class="search-box">
        <input type="text"
               @bind="searchQuery"
               @bind:event="oninput"
               @onkeyup="HandleSearch"
               placeholder="Search for ingredients..."
               class="form-control" />
               <button @onclick="FetchRecipes" class="btn btn-primary mt-2">Find Recipes</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-2">@errorMessage</div>
    }

    @if (suggestions.Any())
    {
        <div class="suggestions-list">
            @foreach (var suggestion in suggestions)
            {
                <div class="suggestion-item" @onclick="() => SelectIngredient(suggestion)">
                    @suggestion.Name
                </div>
            }
        </div>
    }

    @if (selectedIngredients.Any())
    {
    <div class="selected-ingredients">
        <h5>Selected Ingredients:</h5>
        <ul>
            @foreach (var ingredient in selectedIngredients)
            {
                <li>@ingredient.Name 
                    <button @onclick="() => RemoveIngredient(ingredient)">Remove</button>
                </li>
            }
        </ul>
    </div>
    }


    @if (recipes.Any())
    {
        <div class="recipe-list mt-4">
            <h5>Recipes Found:</h5>
            <ul>
                <div class="grid">
                @foreach (var recipe in recipes)
                {
                <div class="grid__item">
                    <div class="card"><img class="card__img" src="@recipe.Image" alt="Snowy Mountains">
                    <div class="card__content">
                        <h1 class="card__header">@recipe.Title</h1>
                    </div>
                    </div>
                </div>
                }
                </div>
            </ul>
        </div>
    }
</div>

<style>

.grid { 
  display: grid;
  width: 114rem;
  grid-gap: 6rem;
  grid-template-columns: repeat(auto-fit, minmax(30rem, 1fr));
  align-items: start;
}
.grid__item {
  background-color: #fff;
  border-radius: 0.4rem;
  overflow: hidden;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: 0.2s;
}
.grid__item:hover {
  transform: translateY(-0.5%);
  box-shadow: 0 4rem 8rem rgba(0, 0, 0, 0.2);
}

.card__img {
  display: block;
  width: 100%];
  height: 18rem;
  object-fit: cover;
}
.card__content {
  padding: 3rem 3rem;
}
.card__header {
  font-size: 3rem;
  font-weight: 500;
  color: #0d0d0d;
  margin-bottom: 1.5rem;
}
.card__text {
  font-size: 1.5rem;
  letter-spacing: 0.1rem;
  line-height: 1.7;
  color: #3d3d3d;
  margin-bottom: 2.5rem;
}
.card__btn {
  display: block;
  width: 100%;
  padding: 1.5rem;
  font-size: 2rem;
  text-align: center;
  color: #3363ff;
  background-color: #e6ecff;
  border: none;
  border-radius: 0.4rem;
  transition: 0.2s;
  cursor: pointer;
}
.card__btn span {
  margin-left: 1rem;
  transition: 0.2s;
}
.card__btn:hover, .card__btn:active {
  background-color: #dce4ff;
}
.card__btn:hover span, .card__btn:active span {
  margin-left: 1.5rem;
}
</style>

@code {
    private string searchQuery = "";
    private List<IngredientSuggestion> suggestions = new();
    private string? errorMessage;
    private string ApiKey => Configuration["Spoonacular:ApiKey"];
    private Timer? debounceTimer;
    private const int DEBOUNCE_DELAY = 500; // Wait 500ms before making API call
    private DateTime lastRequestTime = DateTime.MinValue;
    private const int MIN_REQUEST_INTERVAL = 1000; // Minimum 1 second between requests
    private bool isSearching = false; // To prevent overlapping requests

    private List<IngredientSuggestion> selectedIngredients = new();
    private List<Recipe> recipes = new();

    protected override void OnInitialized()
    {
        Logger.LogInformation("IngredientSearch component initialized");
        if (string.IsNullOrEmpty(ApiKey))
        {
            errorMessage = "RapidAPI key is not configured";
            Logger.LogError("RapidAPI key is missing");
        }
    }

    protected override void OnParametersSet()
    {
        // Setup debounce timer
        debounceTimer?.Dispose();
        debounceTimer = new Timer(DEBOUNCE_DELAY);
        debounceTimer.Elapsed += async (sender, e) => await SearchWithThrottle();
        debounceTimer.AutoReset = false;
    }

    private async Task HandleSearch(KeyboardEventArgs e)
    {
        errorMessage = null;

        if (string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length < 2)
        {
            suggestions.Clear();
            return;
        }

        // Reset and start the debounce timer
        debounceTimer?.Stop();
        debounceTimer?.Start();
    }

    private async Task SearchWithThrottle()
    {
        if (isSearching) return; // Prevent overlapping requests
        isSearching = true;

        try
        {
            // Ensure we're not making requests too frequently
            var timeSinceLastRequest = DateTime.Now - lastRequestTime;
            if (timeSinceLastRequest.TotalMilliseconds < MIN_REQUEST_INTERVAL)
            {
                await Task.Delay(MIN_REQUEST_INTERVAL - (int)timeSinceLastRequest.TotalMilliseconds);
            }

            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/food/ingredients/autocomplete?query={Uri.EscapeDataString(searchQuery)}&number=5"),
                Headers =
                {
                    { "x-rapidapi-key", ApiKey },
                    { "x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com" },
                },
            };

            lastRequestTime = DateTime.Now;
            var response = await client.SendAsync(request);

            if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
            {
                errorMessage = "Rate limit reached. Please wait a moment before trying again.";
                return;
            }

            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            Logger.LogInformation($"API response received: {jsonString}");

            var result = System.Text.Json.JsonSerializer.Deserialize<List<IngredientSuggestion>>(jsonString);
            await InvokeAsync(() =>
            {
                suggestions = result ?? new List<IngredientSuggestion>();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            await InvokeAsync(() =>
            {
                errorMessage = ex.Message.Contains("429")
                    ? "Rate limit reached. Please wait a moment before trying again."
                    : $"Error: {ex.Message}";
                suggestions.Clear();
                StateHasChanged();
            });
        }
        finally
        {
            isSearching = false; // Reset the flag
        }
    }
    
    
    private void SelectIngredient(IngredientSuggestion ingredient)
    {
        // Check if the ingredient is already selected
        if (!selectedIngredients.Any(i => i.Name == ingredient.Name))
        {
            selectedIngredients.Add(ingredient);
            Logger.LogInformation($"Added ingredient: {ingredient.Name}");
        }
        else
        {
            Logger.LogInformation($"Ingredient already selected: {ingredient.Name}");
        }

        // Reset search query and clear suggestions
        searchQuery = "";
        suggestions.Clear();
        StateHasChanged(); // Ensure UI updates
    }



    private void RemoveIngredient(IngredientSuggestion ingredient)
    {
        selectedIngredients.Remove(ingredient);
        Logger.LogInformation($"Removed ingredient: {ingredient.Name}");
    }

    private async Task FetchRecipes()
    {
        if (!selectedIngredients.Any())
        {
            errorMessage = "Please select at least one ingredient.";
            return;
        }

        var ingredientNames = string.Join(",", selectedIngredients.Select(i => i.Name));
        
        try
        {
            using var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/findByIngredients?ingredients={Uri.EscapeDataString(ingredientNames)}&number=5"),
                Headers =
                {
                    { "x-rapidapi-key", ApiKey },
                    { "x-rapidapi-host", "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com" },
                },
            };

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();

            var jsonString = await response.Content.ReadAsStringAsync();
            Logger.LogInformation($"Recipe API response: {jsonString}");

            var result = System.Text.Json.JsonSerializer.Deserialize<List<Recipe>>(jsonString);
            recipes = result ?? new List<Recipe>();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching recipes: {ex.Message}";
            recipes.Clear();
            StateHasChanged();
        }
    }

    public class Recipe
    {
        [JsonPropertyName("title")]
        public string Title { get; set; } = "";

        [JsonPropertyName("instructions")]
        public string Instructions { get; set; } = "";

        [JsonPropertyName("usedIngredientCount")]
        public int usedCount { get; set; }

        [JsonPropertyName("missedIngredientCount")]
        public int unusedCount { get; set; }

        [JsonPropertyName("image")]
        public string Image { get; set; } = "";
    }

    public class IngredientSuggestion
    {
        [JsonPropertyName("name")]
        public string Name { get; set; } = "";

        [JsonPropertyName("id")]
        public int id { get; set; }
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}                                                   